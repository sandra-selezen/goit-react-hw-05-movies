{"version":3,"file":"static/js/361.64d5e759.chunk.js","mappings":"mPAEaA,EAAOC,EAAAA,GAAAA,GAAH,+dAmBJC,EAAYD,EAAAA,GAAAA,IAAH,wTAmBTE,EAAYF,EAAAA,GAAAA,GAAH,+N,uGCtCTG,EAAYH,EAAAA,GAAAA,GAAH,8JAQTI,EAAOJ,EAAAA,GAAAA,GAAH,2N,yJCPJK,EAAgB,mCAAG,WAAOC,GAAP,yFACPC,EAAAA,EAAAA,IAAA,UAAaC,EAAAA,EAAb,gCAAwCC,EAAAA,EAAxC,kBAAyDH,IADlD,cACxBI,EADwB,OAEtBC,EAAYD,EAASE,KAArBD,QAFsB,kBAIvBA,GAJuB,2CAAH,sD,SCDhBE,E,OAAOb,GAAAA,KAAH,uE,SCCJc,EAAa,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC3B,OACE,UAACF,EAAD,CAAME,SAAUA,EAAUC,aAAa,MAAvC,WACE,kBAAOC,KAAK,OAAOC,KAAK,QAAQC,YAAY,mBAC5C,mBAAQF,KAAK,SAAb,sBAGL,E,kBC8CD,EAjDe,WACb,OAAqCG,EAAAA,EAAAA,UAAS,IAA9C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMnB,EAAQkB,EAAaE,IAAI,SACzBC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACR,GAAc,OAAVvB,GAA4B,KAAVA,EAAtB,CAEA,IAAMwB,EAAkB,mCAAG,WAAOxB,GAAP,gGAEFD,EAAiBC,GAFf,OAEjByB,EAFiB,OAGvBT,EAAeS,GAHQ,gDAKvBC,QAAQC,IAAR,MALuB,yDAAH,sDAQxBH,EAAmBxB,EAVuB,CAW3C,GAAE,CAACA,IAcJ,OACE,iCACE,SAACQ,EAAD,CAAYC,SAdK,SAACmB,GACpBA,EAAMC,iBAEN,IAAMC,EAAOF,EAAMG,cACnB,GAAkC,KAA9BD,EAAKE,SAAShC,MAAMiC,MACtB,OAAOd,EAAgB,CAAC,GAG1BA,EAAgB,CAAEnB,MAAO8B,EAAKE,SAAShC,MAAMiC,QAC7CH,EAAKI,OACN,KAKG,SAAC,IAAD,UACGnB,EAAWoB,KAAI,SAAAC,GAAI,OAClB,SAAC,KAAD,WACE,UAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAKE,IAAMC,MAAO,CAAEC,KAAMnB,GAA/C,WACE,SAAC,KAAD,CAAWoB,IAAG,yCAAoCL,EAAKM,aAAeC,IAAKP,EAAKQ,SAChF,SAAC,KAAD,UAAYR,EAAKQ,YAHVR,EAAKE,GADE,QAW3B,C,6ECtDM,IAAMnC,EAAU,mCACVD,EAAM,+B","sources":["components/MovieList/MovieItem.styled.js","components/MovieList/MovieList.styled.js","services/fetchSearchMovie.js","components/SearchForm/SearchForm.styled.js","components/SearchForm/SearchForm.js","pages/Movies.js","services/constants.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Item = styled.li`\n  border-radius: 5px;\n  transform: scale(1);\n  transition: box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1),\n              transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  @media screen and (min-width: 768px) {\n    flex-basis: calc((100% - 96px) / 3);\n  }\n\n  @media screen and (min-width: 1280px) {\n    flex-basis: calc((100% - 96px) / 3);\n  }\n\n  :hover {\n    box-shadow: 0px -1px 33px rgba(81, 170, 255, 0.5);\n    transform: scale(1.03);\n  }\n`;\n\nexport const ItemImage = styled.img`\n  border-radius: 5px;\n\n  @media screen and (max-width: 767px) {\n    width: 280px;\n    height: 406px;\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 224px;\n    height: 325px;\n  }\n\n  @media screen and (min-width: 1280px) {\n    width: 395px;\n    height: 574px;\n  }\n`;\n\nexport const ItemTitle = styled.h2`\n  margin: 12px 0;\n  font-size: 1.25rem;\n  font-weight: 400;\n\n  @media screen and (max-width: 767px) {\n    width: 200px;\n  }\n\n  @media screen and (min-width: 1280px) {\n    width: 310px;\n  }\n`;","import styled from \"styled-components\";\n\nexport const MainTitle = styled.h1`\n  margin-bottom: 24px;\n  font-size: 2.25rem;\n  font-weight: 700;\n  text-align: center;\n  filter: drop-shadow(0 4px 4px #51AAFF);\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n\n  @media screen and (max-width: 767px) {\n    gap: 16px;\n  }\n\n  @media screen and (min-width: 768px) {\n    gap: 32px;\n  }\n`;","import axios from \"axios\";\nimport { API_KEY, URL } from \"./constants\";\n\nexport const fetchSearchMovie = async (query) => {\n  const response = await axios.get(`${URL}search/movie?api_key=${API_KEY}&query=${query}`);\n  const { results } = response.data;\n\n  return results;\n}","import styled from \"styled-components\";\n\nexport const Form = styled.form`\n  margin-bottom: 32px;\n  text-align: center;\n`;","import PropTypes from 'prop-types';\nimport { Form } from './SearchForm.styled';\n\nexport const SearchForm = ({ onSubmit }) => {\n  return (\n    <Form onSubmit={onSubmit} autoComplete=\"off\">\n      <input type=\"text\" name=\"query\" placeholder=\"Search movies\"/>\n      <button type=\"submit\">Search</button>\n    </Form>\n  );\n}\n\nSearchForm.propTypes = {\n  onSubmit: PropTypes.func,\n}","import { useEffect, useState } from \"react\";\nimport { Link, useSearchParams, useLocation } from \"react-router-dom\";\nimport { fetchSearchMovie } from \"services/fetchSearchMovie\";\nimport { SearchForm } from \"components/SearchForm/SearchForm\";\nimport { List } from \"components/MovieList/MovieList.styled\";\nimport { Item, ItemImage, ItemTitle } from \"components/MovieList/MovieItem.styled\";\n\nconst Movies = () => {\n  const [serchMovie, setSearchMovie] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get(\"query\");\n  const location = useLocation();\n\n  useEffect(() => {\n    if (query === null || query === \"\") return;\n\n    const fetchedSearchMovie = async (query) => {\n      try {\n        const movies = await fetchSearchMovie(query);\n        setSearchMovie(movies);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    fetchedSearchMovie(query);\n  }, [query]);\n\n  const onFormSubmit = (event) => {\n    event.preventDefault();\n\n    const form = event.currentTarget;\n    if (form.elements.query.value === \"\") {\n      return setSearchParams({});\n    }\n\n    setSearchParams({ query: form.elements.query.value });\n    form.reset();\n  }\n\n  return (\n    <>\n      <SearchForm onSubmit={onFormSubmit} />\n      <List>\n        {serchMovie.map(item => (\n          <Item key={item.id}>\n            <Link to={`/movies/${item.id}`} state={{ from: location }}>\n              <ItemImage src={`https://image.tmdb.org/t/p/w300${item.poster_path}`} alt={item.title} />\n              <ItemTitle>{item.title}</ItemTitle>\n            </Link>\n          </Item>\n        ))}\n      </List>\n    </>\n  );\n}\n\nexport default Movies;","export const API_KEY = \"959330b1b48c95e1fde96a992bbede29\";\nexport const URL = \"https://api.themoviedb.org/3/\";"],"names":["Item","styled","ItemImage","ItemTitle","MainTitle","List","fetchSearchMovie","query","axios","URL","API_KEY","response","results","data","Form","SearchForm","onSubmit","autoComplete","type","name","placeholder","useState","serchMovie","setSearchMovie","useSearchParams","searchParams","setSearchParams","get","location","useLocation","useEffect","fetchedSearchMovie","movies","console","log","event","preventDefault","form","currentTarget","elements","value","reset","map","item","to","id","state","from","src","poster_path","alt","title"],"sourceRoot":""}